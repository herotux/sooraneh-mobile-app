name: Build and Deploy Flutter APK

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter environment
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.0'
          channel: 'stable'

      - name: Create new Flutter project scaffold
        run: flutter create daric_app

      - name: Copy source files to project
        run: |
          rm -rf daric_app/lib daric_app/assets daric_app/pubspec.yaml
          cp -r lib daric_app/lib
          cp -r assets daric_app/assets
          cp pubspec.yaml daric_app/pubspec.yaml

      - name: Add INTERNET permission to AndroidManifest.xml
        run: |
          sed -i '/<manifest/a\  <uses-permission android:name="android.permission.INTERNET" />' daric_app/android/app/src/main/AndroidManifest.xml

      - name: Set app name in strings.xml (فارسی و انگلیسی)
        run: |
          STRINGS_FILE=daric_app/android/app/src/main/res/values/strings.xml
          if [ ! -f "$STRINGS_FILE" ]; then
            mkdir -p $(dirname "$STRINGS_FILE")
            cat <<EOF > "$STRINGS_FILE"
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="app_name">دریک | Daric</string>
</resources>
EOF
          else
            sed -i 's|<string name="app_name">.*</string>|<string name="app_name">دریک | Daric</string>|' "$STRINGS_FILE"
          fi

      - name: Get Flutter dependencies
        working-directory: daric_app
        run: flutter pub get

      - name: Generate app icon
        working-directory: daric_app
        run: flutter pub run flutter_launcher_icons:main

      - name: Build APK (release)
        working-directory: daric_app
        run: flutter build apk --release

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          path: daric_app/build/app/outputs/flutter-apk/app-release.apk

      - name: Get last Git commit message
        id: get_commit
        run: echo "message<<EOF" >> $GITHUB_OUTPUT
             git log -1 --pretty=%B >> $GITHUB_OUTPUT
             echo "EOF" >> $GITHUB_OUTPUT

      - name: Send APK to Telegram with commit message caption
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [[ -z "$TELEGRAM_BOT_TOKEN" || -z "$TELEGRAM_CHAT_ID" ]]; then
            echo "Telegram secrets not set. Skipping Telegram upload."
            exit 0
          fi
          CAPTION="${{ steps.get_commit.outputs.message }}"
          CAPTION=${CAPTION:0:1000}  # limit caption to 1000 chars
          echo "Sending APK to Telegram with caption:"
          echo "$CAPTION"
          curl -F document=@daric_app/build/app/outputs/flutter-apk/app-release.apk \
               -F chat_id="$TELEGRAM_CHAT_ID" \
               -F caption="$CAPTION" \
               https://api.telegram.org/bot"$TELEGRAM_BOT_TOKEN"/sendDocument
